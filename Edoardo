/*

    QUESTA PARTE COMMENTATA E' RELATIVA AL RIEMPIMENTO DELLA MATRICE PRIORITY, NON ANCORA IMPLEMENTATA

    for(i=0; i<caches; i++) for(ii=0; ii<videos; ii++)
    {
        priority[i][ii] = 0;
        for(iii=0; iii<endpoints; iii++)
        {
            if(latency_to_cache[iii] > 0) priority[i][ii] += request_videos[iii][ii] * (latency[iii] - latency_to_cache[iii][i]) / (latency[iii] - 1.0);
        }
    }

    fclose(input);

}
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int videos, endpoints, requests, caches, dimension;

int main(int argc, char *argv[])
{
    // CONTROLLO ARGOMENTI E APERTURA FILE

    if(argc != 2)
    {
        printf("Wrong number of arguments");
        exit(1);
    }
    printf("Opening file...\n");

    FILE *input = fopen(argv[1], "r");

    if(input == NULL)
    {
        printf("Failed opening file");
        exit(2);
    }
    printf("File opened correctly\n");

    // DICHIARAZIONE VARIABILI

    int i[3] = {};

    //LETTURA PRIMA RIGA

    fscanf(input, "%d %d %d %d %d\n", &videos, &endpoints, &requests, &caches, &dimension);


    // DICHIARAZIONE ARRAY, le ho riscritte in maniera più ortodossa                 #  ID              #  VALUE

    //array monodimensionale per salvare le dimensioni dei video                     // video              size video
    int *sizes;
    sizes = (int *)malloc(videos*sizeof(int));
    //array per le latenze verso il datacenter                                       // endpoint           latenza verso datacenter
    int *latency;
    latency = (int *)malloc(endpoints*sizeof(int));
    //array di comodo per salvare il numero di caches connesse a ogni endpoint       // endpoint           numero di caches connesse
    int *number_of_caches;
    number_of_caches = (int *)malloc(endpoints*sizeof(int));


    // DICHIARAZIONE MATRICI

    //ATTENZIONE CAMBIO METODO DI DICHIARAZIONE DELLE MATRICI
    //IN QUESTA PROVA SARANNO ARRAY MONODIMENSIONALI, ACCEDERO' ALLE
    //RIGHE DIVERSE TRAMITE L'INDIRIZZO : (nome+ID_1*lunghezza_riga+ID_2)

    //HO SCELTO QUESTO METODO CHE SULLA RETE SEMBRA SIA PIU' USATO QUESTO PER LE MATRICI BIDIMENSIONALI ALMENO
    //LA STRUTTURA MATRICIALE CHIARAMENTE E' PURA CONVENZIONE, BASTA METTERSI D'ACCORDO

    //memento : calloc alloca automaticamente a 0

    int *latency_to_cache, *request_videos;
    double *priority;
                                                                                        // #ID 1         #ID 2        #VALUE                                             #LUNGHEZZA RIGA
    latency_to_cache = (int *)calloc(endpoints*caches, sizeof(int));                    //  endpoints     caches       latenza comunicazione da endpoint a cache server   caches
    request_videos = (int *)calloc(endpoints*videos, sizeof(int));                      //  endpoints     videos       numero richieste video <ID_2> all endpoint <ID_1>  videos
    priority = (double *)calloc(caches*videos, sizeof(double));                         //  caches        videos       valore di priorità per video rispetto alla cache   videos

    // VIDEO SIZES

    char row[400]; //melium abundare quam deficere

    fgets(row, 400, input);

    char *ptr;   //copio la riga in un più agile puntatore
    ptr = row;
                 //poi leggo i valori e sposto il puntatore
                 //dopo lo spazio successivo (scarto il primo valore già letto)
    for(i[0]=0; i[0]<videos; i[0]++)
        {

        sscanf(ptr, "%d ", &sizes[i[0]]);    //poi leggo i valori

        //printf per il debug
        //printf("%d\n", sizes[i[0]]);

        ptr = strchr(ptr,' ') + 1;           //e sposto il puntatore dopo lo spazio successivo
                                             //scartando il valore già letto

        }

    // LATENCIES reading

    for(i[0]=0;  i[0]<endpoints; i[0]++)
    {
        fscanf(input, "%d %d\n", &latency[i[0]], &number_of_caches[i[0]]);
        int tmp_cache;
        int tmp_lat;
        for(i[1]=0; i[1]<number_of_caches[i[0]]; i[1]++) {

                fscanf(input, "%d %d",&tmp_cache, &tmp_lat);
                *(latency_to_cache+i[0]*caches+tmp_cache) = tmp_lat;
                }

    }



    //LATENCIES printf per il debug

    printf("\n\nMATRICE CON ENDPOINTS E LATENZE RISPETTO A CACHES, SE NON RAGGIUNTA E' 0\n\n");

    for(i[0]=0;  i[0]<endpoints; i[0]++)
    {
        for(i[1]=0; i[1]<caches; i[1]++) printf("%4.3d ", *(latency_to_cache+i[0]*caches+i[1]));
        printf("\n");
    }

    // VIDEO REQUESTS

    int tmp_video;
    int tmp_endpoint;
    int tmp_request;

    while(!feof(input))
    {
        fscanf(input, "%d %d %d", &tmp_video, &tmp_endpoint, &tmp_request);
        *(request_videos+tmp_endpoint*videos+tmp_video) = tmp_request;
    }

    //VIDEO REQUESTS printf per il debug

    printf("\n\nMATRICE CON ENDPOINT E RICHIESTE PER N VIDEO, SE 0 NON CI SONO RICHIESTE\n\n");

    for(i[0]=0; i[0]<endpoints;i[0]++){
        for(i[1]= 0; i[1]<videos;i[1]++){

            printf("%d ", *(request_videos + i[0]*videos+i[1]));

        }
        printf("\n");
    }

    // CHIUSURA

    fclose(input);
    return 0;
}
